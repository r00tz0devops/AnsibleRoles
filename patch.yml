---
- name: Apply security updates on Ubuntu 24.04 and log user connections
  hosts: '{{ hostname }}'
  become: yes
  become_method: sudo
  vars:
    log_file: "/var/log/ansible/security_updates_log.json"  # Define the log file location
    system_ip: "{{ ansible_default_ipv4.address }}"  # Capture the system's IP address
    ubuntu_version: "{{ ansible_lsb.release }}"  # Capture Ubuntu version
    kernel_version: "{{ ansible_kernel }}"  # Capture Kernel version
  tasks:

    # Ensure the /var/log/ansible directory exists
    - name: Ensure the /var/log/ansible directory exists
      file:
        path: "/var/log/ansible"
        state: directory
        mode: "0755"

    # Ensure log file exists or create it
    - name: Ensure log file exists
      file:
        path: "{{ log_file }}"
        state: touch
        mode: "0644"

    # Get logged in users and their IPs
    - name: Get logged in users and their IPs
      command: "who"
      register: users_connected
      ignore_errors: yes
      no_log: true

    # Parse the output to extract user information and concurrent connections
    - name: Parse user connections and log them
      set_fact:
        user_info: |
          {% set users = [] %}
          {% for line in users_connected.stdout_lines %}
            {% set parts = line.split() %}
            {% if parts|length > 3 %}
              {% set user = parts[0] %}
              {% set ip = parts[2] %}
              {% set users = users + [{'user': user, 'ip': ip}] %}
            {% endif %}
          {% endfor %}
          {{ users }}
      when: users_connected.stdout_lines is defined

    # Log the user connections in JSON format
    - name: Log user connections in JSON format
      copy:
        content: |
          {
            "date": "{{ ansible_date_time.iso8601 }}",
            "hostname": "{{ inventory_hostname }}",
            "ip_address": "{{ system_ip }}",
            "ubuntu_version": "{{ ubuntu_version }}",
            "kernel_version": "{{ kernel_version }}",
            "uptime": "{{ ansible_facts.uptime.days }} days {{ ansible_facts.uptime.hours }} hours {{ ansible_facts.uptime.minutes }} minutes",
            "task": "Log user connections",
            "user_connections": "{{ user_info }}"
          }
        dest: "{{ log_file }}"
        mode: "0644"
        append: yes  # Append the result to the log file

    # Update package cache
    - name: Update package cache
      apt:
        update_cache: yes
      register: apt_cache_update
      ignore_errors: yes
      no_log: true

    # Log the update cache result in JSON format
    - name: Log the update cache result
      copy:
        content: |
          {
            "date": "{{ ansible_date_time.iso8601 }}",
            "hostname": "{{ inventory_hostname }}",
            "ip_address": "{{ system_ip }}",
            "ubuntu_version": "{{ ubuntu_version }}",
            "kernel_version": "{{ kernel_version }}",
            "uptime": "{{ ansible_facts.uptime.days }} days {{ ansible_facts.uptime.hours }} hours {{ ansible_facts.uptime.minutes }} minutes",
            "task": "Update package cache",
            "status": "{{ 'success' if apt_cache_update.rc == 0 else 'failure' }}",
            "stdout": "{{ apt_cache_update.stdout | default('No output') }}",
            "stderr": "{{ apt_cache_update.stderr | default('No error') }}",
            "return_code": "{{ apt_cache_update.rc }}"
          }
        dest: "{{ log_file }}"
        mode: "0644"
        append: yes  # Append the result to the log file

    # Install security updates
    - name: Install security updates
      command: "apt-get upgrade -y --only-upgrade"
      register: update_result
      ignore_errors: yes
      no_log: true

    # Log the update result in JSON format
    - name: Log the update result
      copy:
        content: |
          {
            "date": "{{ ansible_date_time.iso8601 }}",
            "hostname": "{{ inventory_hostname }}",
            "ip_address": "{{ system_ip }}",
            "ubuntu_version": "{{ ubuntu_version }}",
            "kernel_version": "{{ kernel_version }}",
            "uptime": "{{ ansible_facts.uptime.days }} days {{ ansible_facts.uptime.hours }} hours {{ ansible_facts.uptime.minutes }} minutes",
            "task": "Install security updates",
            "status": "{{ 'success' if update_result.rc == 0 else 'failure' }}",
            "stdout": "{{ update_result.stdout | default('No output') }}",
            "stderr": "{{ update_result.stderr | default('No error') }}",
            "return_code": "{{ update_result.rc }}"
          }
        dest: "{{ log_file }}"
        mode: "0644"
        append: yes  # Append the result to the log file

    # Check for upgradable packages (optional, for logging purposes)
    - name: Check for upgradable packages
      command: "apt list --upgradable"
      register: upgradable_result
      ignore_errors: yes
      no_log: true

    # Log the upgradable packages check result in JSON format
    - name: Log upgradable packages check result
      copy:
        content: |
          {
            "date": "{{ ansible_date_time.iso8601 }}",
            "hostname": "{{ inventory_hostname }}",
            "ip_address": "{{ system_ip }}",
            "ubuntu_version": "{{ ubuntu_version }}",
            "kernel_version": "{{ kernel_version }}",
            "uptime": "{{ ansible_facts.uptime.days }} days {{ ansible_facts.uptime.hours }} hours {{ ansible_facts.uptime.minutes }} minutes",
            "task": "Check for upgradable packages",
            "status": "{{ 'success' if upgradable_result.rc == 0 else 'failure' }}",
            "stdout": "{{ upgradable_result.stdout | default('No upgradable packages') }}",
            "stderr": "{{ upgradable_result.stderr | default('No error') }}",
            "return_code": "{{ upgradable_result.rc }}"
          }
        dest: "{{ log_file }}"
        mode: "0644"
        append: yes  # Append the result to the log file

    # Output the final status of the upgrade process
    - name: Output final upgrade status
      debug:
        msg: "Upgrade completed with status {{ update_result.rc }}"
